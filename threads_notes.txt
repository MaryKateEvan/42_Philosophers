- threads share the same memory/data, but processes don't. when creating proccesses the data of the program are duplicated)
- so even if I change the value of a global variable when creating the one thread, the other thread will have the same modification in that variable!
- when i have two thread, practically the first thread finishes its execution first, and then the second first is created and executed. 

- a "mutex" is like a "lock" around a section of code.

syntax for mutex:

pthread_mutex_t x; //declaration
pthread_mutex_init(&x, ...); //initializing the mutex. (We write it before the part that we create the thread.)
... use of the mutex ...
    e.g. pthread_mutex_lock(&x); //checks if another thread has already the "key"
    and: pthread_mutex_unlock(&x); //to free the key again
pthread_mutex_destroy(&x); //at the end of the code. 

- I should NOT call pthread_create and pthrad_joinin the same loop, because then we don't have threads in parallel, but sequential. Each thread is created and finished, in order for the next one to start, and that's something we don't want. 

the pthread_mutex_init and pthread_create return 0 in success.

Mutex Destruction: After all threads have been joined and I am certain that no threads are using the mutex, 
I can safely call pthread_mutex_destroy to clean up the resources associated with the mutex.